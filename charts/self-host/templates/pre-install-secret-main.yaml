# Generate the MSSQL password to be used later when creating the Kubernetes secret.
{{- $mssqlPasswordTxtValue := ( randAlphaNum 32 )}}

{{- $existingSecret := (lookup "v1" "Secret" .Release.Namespace .Values.secrets.secretName) }}

{{- if not $existingSecret }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-secret-gen-main"
  labels:
    app.kubernetes.io/component: pre-install-hook
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation
    {{- if .Values.argoCDSupport }}
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-1"
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    {{ end }}
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}-secret-gen-main"
      labels:
        app.kubernetes.io/component: pre-install-hook
    spec:
      {{- if .Values.serviceAccount.name }}
      serviceAccountName: {{ .Values.serviceAccount.name | quote }}
      {{- end }}
      restartPolicy: Never
      initContainers:
      # Generate the Bitwarden installation host id and key 
      - name: generate-cloud-ids
        command:
        - "/bin/sh"
        - "-c"
        args:
        - |
          echo "###### Generating Bitwarden installation host id and key ######"
          echo "# Using email: ee-user@bitwarden.com #"
          echo "# Using API URI: ${globalSettings__installation__apiUri}/installations #"
          echo "##############################################################"
          
          response=$(curl -s -X POST "${globalSettings__installation__apiUri}/installations" \
                       -H 'Content-Type: application/json' \
            -d '{"email": "ee-user@bitwarden.com"}')
          id=$(echo $response | jq -r '.id')
          key=$(echo $response | jq -r '.key')
          echo $id > /bitwarden/id
          echo $key > /bitwarden/key
        image: bitnami/kubectl:1.21
        volumeMounts:
        - name: temp
          mountPath: "/bitwarden"
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-config-map
      containers:
      - name: create-secret
        command:
        - "/bin/sh"
        - "-c"
        args:
        - |
          id=$(cat /bitwarden/id)
          key=$(cat /bitwarden/key)

          # Check if generated secret exists, if not create it.
          if kubectl get secret {{ .Values.secrets.secretName }} -n {{ .Release.Namespace }} > /dev/null 2>&1; then
            echo "###### Secret {{ .Values.secrets.secretName }} already exists ######"
          else
            echo "###### Creating secret {{ .Values.secrets.secretName }} ######"
            kubectl create secret generic {{ .Values.secrets.secretName }} -n {{ .Release.Namespace }} \
              {{-  if .Values.database.enabled }}
              --from-literal=SA_PASSWORD="{{ $mssqlPasswordTxtValue }}" \
              {{- end }}
              --from-literal=globalSettings__installation__id="$id" \
              --from-literal=globalSettings__installation__key="$key"
          fi
        image: bitnami/kubectl:1.21
        volumeMounts:
        - name: temp
          mountPath: "/bitwarden"
      volumes:
        - name: temp
          emptyDir:
            medium: Memory
{{- end }}

# Display secrets with a pod
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-secret-gen-display"
  labels:
    app.kubernetes.io/component: pre-install-hook
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation
    {{- if .Values.argoCDSupport }}
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "0"
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    {{ end }}
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}-secret-gen-display"
      labels:
        app.kubernetes.io/component: pre-install-hook
    spec:
      {{- if .Values.serviceAccount.name }}
      serviceAccountName: {{ .Values.serviceAccount.name | quote }}
      {{- end }}
      restartPolicy: Never
      containers:
      - name: display-secrets
        command:
        - "/bin/sh"
        - "-c"
        args:
        - |
          echo "###### {{ .Release.Name }} Secrets ######"

          echo "###### Database ######"
          echo "SA_PASSWORD: $SA_PASSWORD"

          echo "###### Bitwarden ######"
          echo "globalSettings__installation__id: $globalSettings__installation__id"
          echo "globalSettings__installation__key: $globalSettings__installation__key"
        image: {{ .Values.supportComponents.kubectl.image.name }}:{{ .Values.supportComponents.kubectl.image.tag }}
        envFrom:
        - secretRef:
            name: {{ .Values.secrets.secretName }}


# Create secret for shared cloud resources
# Migrate this to a single secret once azkv2k8s resolves issue with YAML/JSON mapping

# SMTP Username
---
apiVersion: spv.no/v2beta1
kind: AzureKeyVaultSecret
metadata:
  name: "{{ .Release.Name }}-smtp-username"
  labels:
    app.kubernetes.io/component: pre-install-hook
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "0"
    {{- if .Values.argoCDSupport }}
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-1"
    {{ end }}
spec:
  vault:
    name: {{ .Values.secrets.azureKeyVaultName }}
    object:
      name: shared-globalSettings-mail-smtp-username # name of the akv object
      type: secret
  output:
    secret: 
      name: {{ template "bitwarden.sharedCloudResourcesSecret" . }}
      dataKey: globalSettings__mail__smtp__username

# SMTP Password
---
apiVersion: spv.no/v2beta1
kind: AzureKeyVaultSecret
metadata:
  name: "{{ .Release.Name }}-smtp-password"
  labels:
    app.kubernetes.io/component: pre-install-hook
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "0"
    {{- if .Values.argoCDSupport }}
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-1"
    {{ end }}
spec:
  vault:
    name: {{ .Values.secrets.azureKeyVaultName }}
    object:
      name: shared-globalSettings-mail-smtp-password # name of the akv object
      type: secret
  output:
    secret: 
      name: {{ template "bitwarden.sharedCloudResourcesSecret" . }}
      dataKey: globalSettings__mail__smtp__password

# Yubico Key
---
apiVersion: spv.no/v2beta1
kind: AzureKeyVaultSecret
metadata:
  name: "{{ .Release.Name }}-yubico-key"
  labels:
    app.kubernetes.io/component: pre-install-hook
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "0"
    {{- if .Values.argoCDSupport }}
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-1"
    {{ end }}
spec:
  vault:
    name: {{ .Values.secrets.azureKeyVaultName }}
    object:
      name: shared-globalSettings-yubico-key # name of the akv object
      type: secret
  output:
    secret: 
      name: {{ template "bitwarden.sharedCloudResourcesSecret" . }}
      dataKey: globalSettings__yubico__key

# Yubico clientID
---
apiVersion: spv.no/v2beta1
kind: AzureKeyVaultSecret
metadata:
  name: "{{ .Release.Name }}-yubico-client-id"
  labels:
    app.kubernetes.io/component: pre-install-hook
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "0"
    {{- if .Values.argoCDSupport }}
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-1"
    {{ end }}
spec:
  vault:
    name: {{ .Values.secrets.azureKeyVaultName }}
    object:
      name: shared-globalSettings-yubico-client-id # name of the akv object
      type: secret
  output:
    secret: 
      name: {{ template "bitwarden.sharedCloudResourcesSecret" . }}
      dataKey: globalSettings__yubico__clientId

# Yubico clientID
---
apiVersion: spv.no/v2beta1
kind: AzureKeyVaultSecret
metadata:
  name: "{{ .Release.Name }}-github-token"
  labels:
    app.kubernetes.io/component: pre-install-hook
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "0"
    {{- if .Values.argoCDSupport }}
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-1"
    {{ end }}
spec:
  vault:
    name: {{ .Values.secrets.azureKeyVaultName }}
    object:
      name: shared-github-token # name of the akv object
      type: secret
  output:
    secret: 
      name: {{ template "bitwarden.sharedCloudResourcesSecret" . }}
      dataKey: GITHUB_TOKEN
